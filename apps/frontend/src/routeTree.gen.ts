/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TldrawImport } from './routes/tldraw'
import { Route as PlannersImport } from './routes/planners'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as PlannersPlannerIdImport } from './routes/planners.$plannerId'
import { Route as DailyDateImport } from './routes/daily.$date'
import { Route as PlannersPlannerIdWeeklyWeekIdImport } from './routes/planners.$plannerId.weekly.$weekId'
import { Route as PlannersPlannerIdMonthlyMonthIdImport } from './routes/planners.$plannerId.monthly.$monthId'

// Create/Update Routes

const TldrawRoute = TldrawImport.update({
  id: '/tldraw',
  path: '/tldraw',
  getParentRoute: () => rootRoute,
} as any)

const PlannersRoute = PlannersImport.update({
  id: '/planners',
  path: '/planners',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PlannersPlannerIdRoute = PlannersPlannerIdImport.update({
  id: '/$plannerId',
  path: '/$plannerId',
  getParentRoute: () => PlannersRoute,
} as any)

const DailyDateRoute = DailyDateImport.update({
  id: '/daily/$date',
  path: '/daily/$date',
  getParentRoute: () => rootRoute,
} as any)

const PlannersPlannerIdWeeklyWeekIdRoute =
  PlannersPlannerIdWeeklyWeekIdImport.update({
    id: '/weekly/$weekId',
    path: '/weekly/$weekId',
    getParentRoute: () => PlannersPlannerIdRoute,
  } as any)

const PlannersPlannerIdMonthlyMonthIdRoute =
  PlannersPlannerIdMonthlyMonthIdImport.update({
    id: '/monthly/$monthId',
    path: '/monthly/$monthId',
    getParentRoute: () => PlannersPlannerIdRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/planners': {
      id: '/planners'
      path: '/planners'
      fullPath: '/planners'
      preLoaderRoute: typeof PlannersImport
      parentRoute: typeof rootRoute
    }
    '/tldraw': {
      id: '/tldraw'
      path: '/tldraw'
      fullPath: '/tldraw'
      preLoaderRoute: typeof TldrawImport
      parentRoute: typeof rootRoute
    }
    '/daily/$date': {
      id: '/daily/$date'
      path: '/daily/$date'
      fullPath: '/daily/$date'
      preLoaderRoute: typeof DailyDateImport
      parentRoute: typeof rootRoute
    }
    '/planners/$plannerId': {
      id: '/planners/$plannerId'
      path: '/$plannerId'
      fullPath: '/planners/$plannerId'
      preLoaderRoute: typeof PlannersPlannerIdImport
      parentRoute: typeof PlannersImport
    }
    '/planners/$plannerId/monthly/$monthId': {
      id: '/planners/$plannerId/monthly/$monthId'
      path: '/monthly/$monthId'
      fullPath: '/planners/$plannerId/monthly/$monthId'
      preLoaderRoute: typeof PlannersPlannerIdMonthlyMonthIdImport
      parentRoute: typeof PlannersPlannerIdImport
    }
    '/planners/$plannerId/weekly/$weekId': {
      id: '/planners/$plannerId/weekly/$weekId'
      path: '/weekly/$weekId'
      fullPath: '/planners/$plannerId/weekly/$weekId'
      preLoaderRoute: typeof PlannersPlannerIdWeeklyWeekIdImport
      parentRoute: typeof PlannersPlannerIdImport
    }
  }
}

// Create and export the route tree

interface PlannersPlannerIdRouteChildren {
  PlannersPlannerIdMonthlyMonthIdRoute: typeof PlannersPlannerIdMonthlyMonthIdRoute
  PlannersPlannerIdWeeklyWeekIdRoute: typeof PlannersPlannerIdWeeklyWeekIdRoute
}

const PlannersPlannerIdRouteChildren: PlannersPlannerIdRouteChildren = {
  PlannersPlannerIdMonthlyMonthIdRoute: PlannersPlannerIdMonthlyMonthIdRoute,
  PlannersPlannerIdWeeklyWeekIdRoute: PlannersPlannerIdWeeklyWeekIdRoute,
}

const PlannersPlannerIdRouteWithChildren =
  PlannersPlannerIdRoute._addFileChildren(PlannersPlannerIdRouteChildren)

interface PlannersRouteChildren {
  PlannersPlannerIdRoute: typeof PlannersPlannerIdRouteWithChildren
}

const PlannersRouteChildren: PlannersRouteChildren = {
  PlannersPlannerIdRoute: PlannersPlannerIdRouteWithChildren,
}

const PlannersRouteWithChildren = PlannersRoute._addFileChildren(
  PlannersRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/planners': typeof PlannersRouteWithChildren
  '/tldraw': typeof TldrawRoute
  '/daily/$date': typeof DailyDateRoute
  '/planners/$plannerId': typeof PlannersPlannerIdRouteWithChildren
  '/planners/$plannerId/monthly/$monthId': typeof PlannersPlannerIdMonthlyMonthIdRoute
  '/planners/$plannerId/weekly/$weekId': typeof PlannersPlannerIdWeeklyWeekIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/planners': typeof PlannersRouteWithChildren
  '/tldraw': typeof TldrawRoute
  '/daily/$date': typeof DailyDateRoute
  '/planners/$plannerId': typeof PlannersPlannerIdRouteWithChildren
  '/planners/$plannerId/monthly/$monthId': typeof PlannersPlannerIdMonthlyMonthIdRoute
  '/planners/$plannerId/weekly/$weekId': typeof PlannersPlannerIdWeeklyWeekIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/planners': typeof PlannersRouteWithChildren
  '/tldraw': typeof TldrawRoute
  '/daily/$date': typeof DailyDateRoute
  '/planners/$plannerId': typeof PlannersPlannerIdRouteWithChildren
  '/planners/$plannerId/monthly/$monthId': typeof PlannersPlannerIdMonthlyMonthIdRoute
  '/planners/$plannerId/weekly/$weekId': typeof PlannersPlannerIdWeeklyWeekIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/planners'
    | '/tldraw'
    | '/daily/$date'
    | '/planners/$plannerId'
    | '/planners/$plannerId/monthly/$monthId'
    | '/planners/$plannerId/weekly/$weekId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/planners'
    | '/tldraw'
    | '/daily/$date'
    | '/planners/$plannerId'
    | '/planners/$plannerId/monthly/$monthId'
    | '/planners/$plannerId/weekly/$weekId'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/planners'
    | '/tldraw'
    | '/daily/$date'
    | '/planners/$plannerId'
    | '/planners/$plannerId/monthly/$monthId'
    | '/planners/$plannerId/weekly/$weekId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  PlannersRoute: typeof PlannersRouteWithChildren
  TldrawRoute: typeof TldrawRoute
  DailyDateRoute: typeof DailyDateRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  PlannersRoute: PlannersRouteWithChildren,
  TldrawRoute: TldrawRoute,
  DailyDateRoute: DailyDateRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/planners",
        "/tldraw",
        "/daily/$date"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/planners": {
      "filePath": "planners.tsx",
      "children": [
        "/planners/$plannerId"
      ]
    },
    "/tldraw": {
      "filePath": "tldraw.tsx"
    },
    "/daily/$date": {
      "filePath": "daily.$date.tsx"
    },
    "/planners/$plannerId": {
      "filePath": "planners.$plannerId.tsx",
      "parent": "/planners",
      "children": [
        "/planners/$plannerId/monthly/$monthId",
        "/planners/$plannerId/weekly/$weekId"
      ]
    },
    "/planners/$plannerId/monthly/$monthId": {
      "filePath": "planners.$plannerId.monthly.$monthId.tsx",
      "parent": "/planners/$plannerId"
    },
    "/planners/$plannerId/weekly/$weekId": {
      "filePath": "planners.$plannerId.weekly.$weekId.tsx",
      "parent": "/planners/$plannerId"
    }
  }
}
ROUTE_MANIFEST_END */
